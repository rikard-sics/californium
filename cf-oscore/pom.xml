<?xml version='1.0' encoding='UTF-8'?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.eclipse.californium</groupId>
		<artifactId>cf-bom</artifactId>
		<version>3.10.0-SNAPSHOT</version>
		<relativePath>../bom</relativePath>
	</parent>

	<artifactId>cf-oscore</artifactId>
	<packaging>bundle</packaging>

	<name>Cf-OSCORE</name>
	<description>Californium (Cf) OSCORE, Object Security for Constrained RESTful Environments</description>

	<properties>
		<revapi.skip>true</revapi.skip>
	</properties>

	<dependencies>
		<!-- For federated learning code -->
		<!-- deeplearning4j-core: contains main functionality and neural networks -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-core</artifactId>
		</dependency>

		<!-- ND4J backend: every project needs one of these. The backend defines 
			the hardware on which network training will occur. "nd4j-native-platform" 
			is for CPUs only (for running on all operating systems). -->
		<dependency>
			<groupId>org.nd4j</groupId>
			<artifactId>nd4j-native</artifactId>
		</dependency>
		<!-- CUDA: to use GPU for training (CUDA) instead of CPU, uncomment this, 
			and remove nd4j-native-platform -->
		<!-- Requires CUDA to be installed to use. Change the version (8.0, 9.0, 
			9.1) to change the CUDA version -->
		<!-- Optional, but recommended: if you use CUDA, also use CuDNN. To use 
			this, CuDNN must also be installed -->
		<!-- See: https://deeplearning4j.konduit.ai/config/backends/config-cudnn#using-deeplearning-4-j-with-cudnn -->

		<!-- For float16 support -->
		<dependency>
			<groupId>org.apache.arrow</groupId>
			<artifactId>arrow-vector</artifactId>
			<version>16.1.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.arrow</groupId>
			<artifactId>arrow-memory-netty</artifactId>
			<version>16.1.0</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>californium-legal</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.californium</groupId>
			<artifactId>californium-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.californium</groupId>
			<artifactId>scandium</artifactId>
		</dependency>
		<dependency>
			<groupId>com.upokecenter</groupId>
			<artifactId>cbor</artifactId>
		</dependency>

		<dependency> <!-- Rikard: Added this as Jim did in his pom -->
			<groupId>net.i2p.crypto</groupId>
			<artifactId>eddsa</artifactId>
			<version>0.3.0</version>
			<type>jar</type>
		</dependency>

		<dependency>
			<groupId>org.datavec</groupId>
			<artifactId>datavec-api</artifactId>
			<version>1.0.0-M2.1</version>
		</dependency>

		<!-- RH: Below for gRPC -->
		<dependency>
			<groupId>io.grpc</groupId>
			<artifactId>grpc-netty-shaded</artifactId>
			<version>1.64.0</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.grpc</groupId>
			<artifactId>grpc-protobuf</artifactId>
			<version>1.64.0</version>
		</dependency>
		<dependency>
			<groupId>io.grpc</groupId>
			<artifactId>grpc-stub</artifactId>
			<version>1.64.0</version>
		</dependency>
		<dependency> <!-- necessary for Java 9+ -->
			<groupId>org.apache.tomcat</groupId>
			<artifactId>annotations-api</artifactId>
			<version>6.0.53</version>
			<scope>provided</scope>
		</dependency>

<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-server</artifactId>
  <version>12.0.16</version>
</dependency>

<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-alpn-server</artifactId>
  <version>12.0.16</version>
</dependency>

<dependency>
  <groupId>org.eclipse.jetty.http2</groupId>
  <artifactId>jetty-http2-server</artifactId>
  <version>12.0.16</version>
</dependency>

<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-alpn-java-server</artifactId>
  <version>12.0.16</version>
</dependency>




		<!-- test dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.californium</groupId>
			<artifactId>californium-proxy2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency> <!-- Rikard: Added for ChaCha20-Poly1305 -->
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk15to18</artifactId>
			<version>1.72</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- For federated learning -->
			<!-- Maven shade plugin configuration: this is required so that if you 
				build a single JAR file (an "uber-jar") it will contain all the required 
				native libraries, and the backends will work correctly. Used for example 
				when running the following commants mvn package cd target java -cp deeplearning4j-examples-1.0.0-beta-bin.jar 
				org.deeplearning4j.LenetMnistExample -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>${maven-shade-plugin.version}</version>
				<configuration>
					<shadedArtifactAttached>true</shadedArtifactAttached>
					<shadedClassifierName>bin</shadedClassifierName>
					<createDependencyReducedPom>true</createDependencyReducedPom>
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<excludes>
								<exclude>org/datanucleus/**</exclude>
								<exclude>META-INF/*.SF</exclude>
								<exclude>META-INF/*.DSA</exclude>
								<exclude>META-INF/*.RSA</exclude>
							</excludes>
						</filter>
					</filters>
				</configuration>

				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>reference.conf</resource>
								</transformer>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>



			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<descriptorRefs>
						<descriptorRef>enhanced-jar-with-licenses</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<Export-Package>
							org.eclipse.californium.cose,
							org.eclipse.californium.oscore
						</Export-Package>
						<Import-Package>
							*
						</Import-Package>
						<Bundle-SymbolicName>${project.groupId}.oscore</Bundle-SymbolicName>
					</instructions>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version> <!-- Ensure you're using a recent version -->
				<configuration>
					<source>${project.build.javaVersion}</source>
					<target>11</target>
				</configuration>
			</plugin>


		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- maven compile would try to resolve test dependencies, even if tests 
				are skipped. Therefore include this test dependency only, if tests are enabled -->
			<id>tests</id>
			<activation>
				<property>
					<name>maven.test.skip</name>
					<value>!true</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>californium-core</artifactId>
					<classifier>tests</classifier>
					<type>test-jar</type>
				</dependency>
				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>element-connector</artifactId>
					<version>${project.version}</version>
					<classifier>tests</classifier>
					<type>test-jar</type>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>
