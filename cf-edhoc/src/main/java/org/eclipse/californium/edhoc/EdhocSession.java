/*******************************************************************************
 * Copyright (c) 2020 RISE and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 *    http://www.eclipse.org/legal/epl-v20.html
 * and the Eclipse Distribution License is available at
 *    http://www.eclipse.org/org/documents/edl-v10.html.
 * 
 * Contributors:
 *    Marco Tiloca (RISE)
 *    Rikard HÃ¶glund (RISE)
 *    
 ******************************************************************************/

package org.eclipse.californium.edhoc;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.List;

import org.eclipse.californium.cose.OneKey;

import com.upokecenter.cbor.CBORObject;

public class EdhocSession {
	
	private EdhocState state;
	
	public EdhocSession(boolean initiator, List<Integer> ciphersuites, int auth, int corr, OneKey ltk, OneKey ek) {
		
		this.state = new EdhocState(initiator, ciphersuites, auth, corr, ltk, ek);
		
	}
	
	/**
	 * EDHOC-specific version of KDF, building the 'info' parameter of HKDF-Expand from a transcript_hash and a label
	 * @param ciphersuite   The used EDHOC ciphersuite
	 * @param prk   The Pseudo Random Key
	 * @param transcript_hash   The transcript hash
	 * @param label   The label to use to derive the OKM
	 * @param len   The intended length of the OKM to derive, in bytes
	 * @return  the OKM generated by HKDF-Expand
	 */
	public static byte[] edhocKDF(int ciphersuite, byte[] prk, byte[] transcript_hash, String label, int len)
			throws InvalidKeyException, NoSuchAlgorithmException {
		
		int edhoc_aead_id;
		
		if(ciphersuite == Constants.EDHOC_CIPHER_SUITE_0 || ciphersuite == Constants.EDHOC_CIPHER_SUITE_2)
			edhoc_aead_id = 10; // AES-CCM-16-64-128
		else if(ciphersuite == Constants.EDHOC_CIPHER_SUITE_1 || ciphersuite == Constants.EDHOC_CIPHER_SUITE_3)
			edhoc_aead_id = 30; // AES-CCM-16-128-128
		else
			return null;
		
		CBORObject infoArray = CBORObject.NewArray();
		
		infoArray.Add(edhoc_aead_id);
		infoArray.Add(transcript_hash);
		infoArray.Add(label);
		infoArray.Add(len);
		
		byte[] info = infoArray.EncodeToBytes();
		
		return Hkdf.expand(prk, info, len);
		
	}
	
	/**
	 * EDHOC-Exporter interface
	 * @param label   The label to use to derive the OKM
	 * @param len   The intended length of the OKM to derive, in bytes
	 * @return  the application key
	 */
	public byte[] edhocExporter(String label, int len) throws InvalidKeyException, NoSuchAlgorithmException {
		
		return edhocKDF(this.state.getCiphersuite(), this.state.getPRK4x3m(), this.state.getTH4(), label, len);
		
	}

}


